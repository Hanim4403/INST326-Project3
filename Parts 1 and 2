My part:
from datetime import time  # Importing time-related modules
from enum import Enum  # Import Enum to represent caregiver availability statuses

# Enum class for caregiver availability status
class Availability(Enum):
    PREFERRED = "preferred"    # Preferred shift
    AVAILABLE = "available"    # Available shift
    UNAVAILABLE = "unavailable"  # Unavailable shift

# Shift class to represent AM and PM shifts
class Shift:
    AM_START = time(7, 0)  # Start time for AM shift
    AM_END = time(13, 0)   # End time for AM shift
    PM_START = time(13, 0)  # Start time for PM shift
    PM_END = time(19, 0)   # End time for PM shift

    def __init__(self, is_am: bool):
        # Initialize shift as AM or PM
        self.is_am = is_am
        self.start_time = self.AM_START if is_am else self.PM_START  # Set start time based on shift type
        self.end_time = self.AM_END if is_am else self.PM_END        # Set end time based on shift type

    def __str__(self):
        # String representation for the shift, formatted with times
        shift_name = "AM" if self.is_am else "PM"
        return f"{shift_name} Shift ({self.start_time.strftime('%I:%M %p')} - {self.end_time.strftime('%I:%M %p')})"

# Caregiver class to store and manage caregiver information
class Caregiver:
    def __init__(self, name: str, phone: str, email: str, pay_rate: float):
        # Initialize caregiver details
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours = 0  # Default worked hours is set to zero

        # Default availability schedule with all shifts marked as available
        self.availability = {
            'monday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE},
            'tuesday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE},
            'wednesday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE},
            'thursday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE},
            'friday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE},
            'saturday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE},
            'sunday': {'am': Availability.AVAILABLE, 'pm': Availability.AVAILABLE}
        }

    def set_availability(self, day: str, shift: str, status: Availability):
        # Update availability for a specific day and shift
        day = day.lower()  # Convert day to lowercase for consistency
        shift = shift.lower()  # Convert shift to lowercase for consistency

        # Check if inputs are valid
        if day not in self.availability:
            raise ValueError(f"Invalid day: {day}")
        if shift not in ['am', 'pm']:
            raise ValueError(f"Invalid shift: {shift}")
        if not isinstance(status, Availability):
            raise ValueError(f"Invalid availability status: {status}")

        # Update the caregiver's availability for the given day and shift
        self.availability[day][shift] = status

    def get_availability(self, day: str, shift: str) -> Availability:
        # Retrieve availability for a specific day and shift
        day = day.lower()  # Convert day to lowercase for consistency
        shift = shift.lower()  # Convert shift to lowercase for consistency
        return self.availability[day][shift]  # Return availability status

    def set_weekly_availability(self, day: str, status: Availability):
        # Update availability for both shifts on a specific day
        self.set_availability(day, 'am', status)  # Set AM shift status
        self.set_availability(day, 'pm', status)  # Set PM shift status

    def add_hours(self, hours: float):
        # Add worked hours to the caregiver's total
        self.hours += hours

    def __str__(self):
        # String representation of the caregiver
        return f"Caregiver: {self.name}\nContact: {self.phone}, {self.email}\nPay Rate: ${self.pay_rate}/hr"
